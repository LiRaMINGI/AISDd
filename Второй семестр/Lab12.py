from typing import List

def backpack(W: int, weights: List[int], values: List[int], n: int) -> int:
    """
    Решает задачу о рюкзаке 0/1 методом динамического программирования.

    Задача:
    - Дано n предметов с заданными весами и ценностями.
    - Имеется рюкзак с ограниченной вместимостью W.
    - Цель: выбрать такой набор предметов, чтобы их суммарный вес не превышал W,
      а суммарная ценность была максимальной.

    Аргументы:
        W (int): Вместимость рюкзака.
        weights (List[int]): Список весов предметов.
        values (List[int]): Список ценностей предметов.
        n (int): Количество предметов.

    Возвращает:
        int: Максимальная возможная ценность, которую можно положить в рюкзак.
    """
    # dp[i][w] — максимальная ценность, которую можно получить, взяв первые i предметов
    # и имея вместимость w.
    dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]

    # Заполняем таблицу динамического программирования
    for i in range(1, n + 1):
        for w in range(W + 1):
            if weights[i - 1] <= w:
                # Предмет можно взять: выбираем максимум между
                # брать предмет или не брать
                dp[i][w] = max(
                    dp[i - 1][w],  # Не берём текущий предмет
                    dp[i - 1][w - weights[i - 1]] + values[i - 1]  # Берём предмет
                )
            else:
                # Предмет нельзя взять из-за превышения веса
                dp[i][w] = dp[i - 1][w]

    return dp[n][W]


if __name__ == "__main__":
    # Тестовые примеры
    print(backpack(10, [2, 3, 5, 7], [10, 15, 20, 25], 4))  
    # Ожидается: 45 (берём предметы весом 3 и 7 → 15 + 25)

    print(backpack(10, [1, 2, 3, 4, 10], [2, 3, 7, 9, 20], 5))  
    # Ожидается: 21 (берём предметы весом 1, 2, 3, 4 → 2+3+7+9=21)